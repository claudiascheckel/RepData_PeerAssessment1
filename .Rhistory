pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
python -V
pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
list.files(pythonScriptsDir)
pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
getwd(pythonScriptsDir)
source("https://bioconductor.org/biocLite.R")
biocLite("DEXSeq")
require(DEXSeq)
pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
list.files(pythonScriptsDir)
getwd(pythonScriptsDir)
getwd(pythonScriptsDir)
browseVignettes("DEXSeq")
library("DEXSeq")
?DEXSeq
install.packages("D")
install.packages("DEXSeq", version='1.16.8')
install.packages("DEXSeq", version = "1.16.8")
source("https://bioconductor.org/biocLite.R")
biocLite("DEXSeq", version = "1.16.8")
rnorm
con <- url ("http://www.jhsph.edu", "r")
x <- readLines(con)
head(x)
dir()
myfunction <- function () {
x <- rnorm(100)
mean(x)
}
ls
myfunction()
myfunction()
second(1)
second <- function(x) {
x + rnorm(length(x))
}
second(4)
myfunction()
second(4)
myfunction()
second() #lists function
second #lists function
library(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
82.63636 - 209.21429
tapply(mtcars$hp, mtcars$cyl, mean)[1]
(tapply(mtcars$hp, mtcars$cyl, mean)[3]) - (tapply(mtcars$hp, mtcars$cyl, mean)[1])
round((tapply(mtcars$hp, mtcars$cyl, mean)[3]) - (tapply(mtcars$hp, mtcars$cyl, mean)[1]))
round(tapply(iris$Sepal.Length, iris$Species, mean)[3])
mean(x)
traceback()
debug(lm)
lm(y~x)
read.csv("nosuchfile")
options(error = recover) #as long as the R session is open every error equals recover
read.csv("nosuchfile")
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(v = 0.4, col = "red")
abline(h = .4, col = "red")
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2]) #displays data points colored according to new centroids
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 8, cex = 2, lwd = 2) #plot final centroids
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2) #plot final centroids
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
setwd("/Users/claudiascheckel/Dropbox/Coursera_DataScience/5_Reproducible Research/Week2")
setwd("/Users/claudiascheckel/Desktop/RepData_PeerAssessment1")
act <- read.csv(unz("activity.zip"))
?unz
act <- read.csv(unzip("activity.zip"))
head(acy)
head(act)
setwd("/Users/claudiascheckel/Dropbox/Coursera_DataScience/5_Reproducible Research/Week2")
setwd("/Users/claudiascheckel/Desktop/RepData_PeerAssessment1")
getwd()
act <- read.csv(unzip("activity.zip"))
act$date <- as.Date(act$date)
library(plyr)
day <- ddply(act,.(date),summarize, sum=sum(steps, na.rm=T))
day.freq = (rep(day$date, day$sum))
hist(day.freq, breaks = dim(day)[1], xlab = "Day", main="Total Number of Steps per day")
mean(day$sum)
median(day$sum)
hist(day)
head(day)
head(day$sum)
hist(day$sum)
hist(day$sum, xlab = "Total Number of Steps", ylab="Frequency [Days]", main="Total Number of Steps per Day")
act_na <- act[(is.na(act$steps)),]
dim(act_na) [1]
for (i in 1:length(act_na$date)) {
x <- act_na$interval[i]
y <- mean(act[(act$interval==x),1], na.rm=T)
act_na$steps[i] <- y
}
act_new <- rbind(act_na, act[!(rownames(act)%in%rownames(act_na)),])
day_new <- ddply(act_new,.(date),summarize, sum=sum(steps))
hist(day_new$sum, xlab = "Total Number of Steps", ylab="Frequency [Days]", main="Total Number of Steps per Day - missing values filled")
